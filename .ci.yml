stages:
  - check_code_format
  - build_binaries
  - run_parsing_and_formal_tests
  - run_large_designs_tests
  - optional_bsg_tests

image: debian:bookworm

check_format:
  stage: check_code_format
  script:
    - echo "##/ Install dependencies \##"
    - apt update && apt install -y git clang-format python3 jq
    - echo "##/ Check code format \##"
    - ./.github/scripts/format_sources.sh
    - exit_code=0
    - if ! git diff --exit-code; then
    -   echo "|  Format locally using ./.github/scripts/format_sources.sh"
    -   exit_code=1
    - fi
    - ./.github/scripts/sort_passlists.sh
    - if ! git diff --exit-code; then
    -   echo "|  Format locally using ./.github/scripts/format_sources.sh"
    -   exit_code=1
    - fi
    - exit $exit_code

build_binaries:
  stage: build_binaries
  variables:
    SCALENODE_RAM: 8000
    SCALENODE_CPU: 8
  only:
    - main
    - merge_requests
  script:
    - echo "##/ Install dependencies and build \##"
    - apt update
    - >
        apt install -y gcc-11 g++-11 build-essential
        cmake tclsh ant default-jre swig google-perftools
        libgoogle-perftools-dev python3 python3-dev
        python3-pip uuid uuid-dev tcl-dev flex libfl-dev
        git pkg-config libreadline-dev bison libffi-dev
        wget python3-orderedmultidict
    - echo "##/ Build yosys, surelog and synlig binaries \##"
    - git submodule sync
    - git submodule update --init --recursive third_party/{surelog,yosys}
    - make install -j $(nproc)
    - echo "##/ Build sv2v binary \##"
    - git submodule update --init --recursive --checkout third_party/sv2v
    - wget -qO- https://get.haskellstack.org/ | sh -s - -f -d /usr/local/bin
    - make build_sv2v -j$(nproc)
  artifacts:
    when: always
    paths:
      - out/

parsing_tests_read_uhdm:
  stage: run_parsing_and_formal_tests
  variables:
    PARSER: surelog
    TARGET: uhdm/yosys/test-ast
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  script:
    - ./tests/scripts/run_parsing.sh install_dependencies load_submodules read_uhdm
  artifacts:
    when: always
    paths:
      - build/

parsing_tests_read_systemverilog:
  stage: run_parsing_and_formal_tests
  variables:
    PARSER: yosys-plugin
    TARGET: uhdm/yosys/test-ast
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  script:
    - ./tests/scripts/run_parsing.sh install_dependencies load_submodules read_systemverilog
  artifacts:
    when: always
    paths:
      - build/

formal_verification_simple_tests:
  stage: run_parsing_and_formal_tests
  variables:
    SCALENODE_RAM: 8000
    SCALENODE_CPU: 6
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  script:
    - ./tests/scripts/run_formal.sh --name simple install_dependencies load_submodules build_dependencies run gather_results
  artifacts:
    when: always
    paths:
      - build/

formal_verification_yosys_tests:
  stage: run_parsing_and_formal_tests
  variables:
    SCALENODE_RAM: 8000
    SCALENODE_CPU: 6
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  script:
    - ./tests/scripts/run_formal.sh --name yosys install_dependencies load_submodules build_dependencies run gather_results
  artifacts:
    when: always
    paths:
      - build/

formal_verification_sv2v_tests:
  stage: run_parsing_and_formal_tests
  variables:
    SCALENODE_RAM: 8000
    SCALENODE_CPU: 6
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  script:
    - ./tests/scripts/run_formal.sh --name sv2v install_dependencies load_submodules build_dependencies run gather_results
  artifacts:
    when: always
    paths:
      - build/

veer_synth_large_design:
  stage: run_large_designs_tests
  dependencies: [build_binaries]
  variables:
    SCALENODE_RAM: 12000
    SCALENODE_CPU: 4
  only:
    - main
    - merge_requests
  script:
    - ./tests/scripts/run_large_designs.sh --name veer install_dependencies load_submodules run
  artifacts:
    when: always
    paths:
      - tests/build/

blackparrot_synth_AMD_xilinx_large_design:
  stage: run_large_designs_tests
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  variables:
    SCALENODE_RAM: 20000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name blackparrot_AMD install_dependencies load_submodules run
  artifacts:
    when: always
    paths:
      - tests/build/

blackparrot_synth_ASIC_xilinx_large_design:
  stage: run_large_designs_tests
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  variables:
    SCALENODE_RAM: 20000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name blackparrot_ASIC install_dependencies load_submodules run
  artifacts:
    when: always
    paths:
      - tests/build/
      - third_party/OpenROAD-flow-scripts/logs
      - third_party/OpenROAD-flow-scripts/reports
      - third_party/OpenROAD-flow-scripts/results

ibex_synth_large_design:
  stage: run_large_designs_tests
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  variables:
    SCALENODE_RAM: 16000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name ibex install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name ibex load_submodules run
  artifacts:
    when: always
    paths:
      - tests/build/

ibex_synth_f4pga_large_design:
  stage: run_large_designs_tests
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  variables:
    SCALENODE_RAM: 20000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name ibex_f4pga install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name ibex_f4pga load_submodules run
  artifacts:
    when: always
    paths:
      - tests/build/


opentitan_9d82960888_synth_large_design:
  stage: run_large_designs_tests
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  variables:
    SCALENODE_RAM: 50000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name opentitan_9d82960888 install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name opentitan_9d82960888 load_submodules run
  artifacts:
    when: always
    paths:
      - tests/build/

opentitan_synth_large_design:
  stage: run_large_designs_tests
  tags: ['ace-x86_64-high-mem']
  dependencies: [build_binaries]
  when: manual
  only:
    - main
    - merge_requests
  variables:
    SCALENODE_RAM: 160000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name opentitan install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name opentitan load_submodules run
  artifacts:
    when: always
    paths:
      - tests/build/

opentitan_parse_report_quick_large_design:
  stage: run_large_designs_tests
  dependencies: [build_binaries]
  only:
    - main
    - merge_requests
  variables:
    SCALENODE_RAM: 36000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name opentitan_parse_quick install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name opentitan_parse_quick load_submodules run
  artifacts:
    when: always
    paths:
      - tests/opentitan/opentitan_parsing_test/build/

opentitan_parse_report_full_large_design:
  stage: run_large_designs_tests
  tags: ['ace-x86_64-high-mem']
  dependencies: [build_binaries]
  when: manual
  only:
    - main
    - merge_requests
  variables:
    SCALENODE_RAM: 120000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name opentitan_parse_full install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name opentitan_parse_full load_submodules run
  artifacts:
    when: always
    paths:
      - tests/opentitan/opentitan_parsing_test/build/


bsg_test_diff:
  stage: optional_bsg_tests
  dependencies: [build_binaries]
  when: manual
  only:
    - main
    - merge_requests
  script:
    - echo "##/ Install dependencies \##"
    - ./tests/scripts/run_large_designs.sh --name opentitan install_dependencies
    - echo "##/ Load submodules \##"
    - git submodule sync
    - git submodule update --depth 1 --init --recursive --checkout third_party/bsg_micro_designs
    - echo "##/ Start bsg diff test \##"
    - export PATH="$PWD/out/current/bin:$PATH"
    - python3 ./tests/bsg_micro_designs/generate_bsg_tests.py
    - cat tests/bsg_micro_designs/build/bsg_micro_designs_summary.md
  artifacts:
    when: always
    paths:
      - tests/bsg_micro_designs/build/
