stages:
  - "Check code format"
  - "Build binaries"
  - "Run parsing and formal verification tests"
  - "Run large designs tests"
  - "Optional tests"

image: debian:bookworm

check_format:
  stage: "Check code format"
  script:
    - echo "##/ Install dependencies \##"
    - apt update && apt install -y git clang-format python3 jq
    - echo "##/ Check code format \##"
    - ./.github/scripts/format_sources.sh
    - exit_code=0
    - if ! git diff --exit-code; then
    -   echo "|  Format locally using ./.github/scripts/format_sources.sh"
    -   exit_code=1
    - fi
    - ./.github/scripts/sort_passlists.sh
    - if ! git diff --exit-code; then
    -   echo "|  Format locally using ./.github/scripts/format_sources.sh"
    -   exit_code=1
    - fi
    - exit $exit_code

variables:
  BUILD_DEPENDENCIES: >
    google-perftools libgoogle-perftools-dev
    libffi-dev python3-orderedmultidict git
    tclsh ant default-jre swig clang gcc-11
    pkg-config libreadline-dev bison g++-11
    python3 python3-dev python3-pip uuid
    uuid-dev tcl-dev flex libfl-dev wget
    build-essential cmake

.job_template: &build_binary
  stage: "Build binaries"
  variables:
    SCALENODE_RAM: 8000
    SCALENODE_CPU: 8
  only:
    - main
    - merge_requests
  artifacts:
    when: always
    paths:
      - out/

build_plugin:
  <<: *build_binary
  script:
    - echo "##/ Install dependencies and build \##"
    - apt update && apt install -y $BUILD_DEPENDENCIES
    - echo "##/ Build yosys, surelog and synlig binaries \##"
    - git submodule sync && git submodule update --init --recursive third_party/{surelog,yosys}
    - make plugin install@surelog -j $(nproc) PREFIX=out

build_asan:
  <<: *build_binary
  script:
    - echo "##/ Install dependencies and build \##"
    - apt update && apt install -y $BUILD_DEPENDENCIES
    - echo "##/ Build yosys, surelog and synlig binaries \##"
    - git submodule sync && git submodule update --init --recursive third_party/{surelog,yosys}
    - make install install@surelog -j $(nproc) ENABLE_ASAN=1 CC=clang CXX=clang++ CFG_BUILD_TYPE=asan PREFIX=out

build_release:
  <<: *build_binary
  script:
    - echo "##/ Install dependencies and build \##"
    - apt update && apt install -y $BUILD_DEPENDENCIES
    - echo "##/ Build synlig binary \##"
    - git submodule sync && git submodule update --init --recursive --checkout third_party/{surelog,yosys,sv2v}
    - make install install@surelog -j $(nproc) PREFIX=out
    - echo "##/ Build tools \##"
    - wget -qO- https://get.haskellstack.org/ | sh -s - -f -d /usr/local/bin
    - make install@sv2v install@yosys-tools -j$(nproc) PREFIX=out

build_package:
  <<: *build_binary
  script:
    - echo "##/ Install dependencies and build \##"
    - apt update && apt install -y $BUILD_DEPENDENCIES
    - echo "##/ Build yosys, surelog and synlig binaries \##"
    - git submodule sync && git submodule update --init --recursive third_party/{surelog,yosys}
    - make install -j $(nproc) PREFIX=out
    - mkdir synlig
    - cp out/bin/synlig synlig/
    - cp -r out/share/synlig synlig/share
    - tar -zcvf release.tar.gz synlig
  artifacts:
    paths:
      - release.tar.gz

.job_template: &parsing_test
  stage: "Run parsing and formal verification tests"
  only:
    - main
    - merge_requests
  artifacts:
    when: always
    paths:
      - build/

plugin_read_uhdm:
  <<: *parsing_test
  dependencies: [build_plugin]
  script:
    - ./tests/scripts/run_parsing.sh install_dependencies load_submodules --type plugin read_uhdm

plugin_read_systemverilog:
  <<: *parsing_test
  dependencies: [build_plugin]
  script:
    - ./tests/scripts/run_parsing.sh install_dependencies load_submodules --type plugin read_systemverilog

asan_read_uhdm:
  <<: *parsing_test
  dependencies: [build_asan]
  script:
    - ./tests/scripts/run_parsing.sh install_dependencies load_submodules --type asan read_uhdm

asan_read_systemverilog:
  <<: *parsing_test
  dependencies: [build_asan]
  script:
    - ./tests/scripts/run_parsing.sh install_dependencies load_submodules --type asan read_systemverilog

release_read_uhdm:
  <<: *parsing_test
  dependencies: [build_release]
  script:
    - ./tests/scripts/run_parsing.sh install_dependencies load_submodules --type release read_uhdm

release_read_systemverilog:
  <<: *parsing_test
  dependencies: [build_release]
  script:
    - ./tests/scripts/run_parsing.sh install_dependencies load_submodules --type release read_systemverilog

.job_template: &formal_test
  stage: "Run parsing and formal verification tests"
  dependencies: [build_release]
  variables:
    SCALENODE_RAM: 8000
    SCALENODE_CPU: 6
  only:
    - main
    - merge_requests
  artifacts:
    when: always
    paths:
      - build/

simple_formal_verification_tests:
  <<: *formal_test
  script:
    - ./tests/scripts/run_formal.sh --name simple install_dependencies load_submodules build_dependencies run gather_results

yosys_formal_verification_tests:
  <<: *formal_test
  script:
    - ./tests/scripts/run_formal.sh --name yosys install_dependencies load_submodules build_dependencies run gather_results

sv2v_formal_verification_tests:
  <<: *formal_test
  script:
    - ./tests/scripts/run_formal.sh --name sv2v install_dependencies load_submodules build_dependencies run gather_results

.job_template: &large_design_test
  stage: "Run large designs tests"
  dependencies: [build_release]
  only:
    - main
    - merge_requests
  artifacts:
    when: always
    paths:
      - tests/build/

veer_synth_large_design:
  <<: *large_design_test
  variables:
    SCALENODE_RAM: 12000
    SCALENODE_CPU: 4
  script:
    - ./tests/scripts/run_large_designs.sh --name veer install_dependencies load_submodules run

blackparrot_synth_AMD_xilinx_large_design:
  <<: *large_design_test
  variables:
    SCALENODE_RAM: 20000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name blackparrot_AMD install_dependencies load_submodules run

blackparrot_synth_ASIC_xilinx_large_design:
  <<: *large_design_test
  variables:
    SCALENODE_RAM: 20000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name blackparrot_ASIC install_dependencies load_submodules run
  artifacts:
    paths:
      - third_party/OpenROAD-flow-scripts/logs
      - third_party/OpenROAD-flow-scripts/reports
      - third_party/OpenROAD-flow-scripts/results

ibex_synth_large_design:
  <<: *large_design_test
  variables:
    SCALENODE_RAM: 16000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name ibex install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name ibex load_submodules run

opentitan_9d82960888_synth_large_design:
  <<: *large_design_test
  variables:
    SCALENODE_RAM: 50000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name opentitan_9d82960888 install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name opentitan_9d82960888 load_submodules run

opentitan_synth_large_design:
  <<: *large_design_test
  tags: ['ace-x86_64-high-mem']
  when: manual
  variables:
    SCALENODE_RAM: 160000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name opentitan install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name opentitan load_submodules run

.job_template: &opentitan_parsing_test
  stage: "Run large designs tests"
  dependencies: [build_release]
  only:
    - main
    - merge_requests
  artifacts:
    when: always
    paths:
      - tests/opentitan/opentitan_parsing_test/build/

opentitan_parse_report_quick_large_design:
  <<: *opentitan_parsing_test
  variables:
    SCALENODE_RAM: 36000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name opentitan_parse_quick install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name opentitan_parse_quick load_submodules run

opentitan_parse_report_full_large_design:
  <<: *opentitan_parsing_test
  tags: ['ace-x86_64-high-mem']
  when: manual
  variables:
    SCALENODE_RAM: 120000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name opentitan_parse_full install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name opentitan_parse_full load_submodules run

ibex_synth_f4pga_large_design:
  stage: "Run large designs tests"
  dependencies: [build_plugin]
  only:
    - main
    - merge_requests
  artifacts:
    when: always
    paths:
      - tests/build/
  variables:
    SCALENODE_RAM: 20000
    SCALENODE_CPU: 6
  script:
    - ./tests/scripts/run_large_designs.sh --name ibex_f4pga install_dependencies
    - echo "##/ Setup tools \##"
    - eval $SETUP_TOOLS && export PATH="$PATH:$TOOLS_HOME/bin"
    - ./tests/scripts/run_large_designs.sh --name ibex_f4pga load_submodules run

bsg_test_diff:
  stage: "Optional tests"
  dependencies: [build_plugin]
  when: manual
  only:
    - main
    - merge_requests
  script:
    - echo "##/ Install dependencies \##"
    - ./tests/scripts/run_large_designs.sh --name opentitan install_dependencies
    - echo "##/ Load submodules \##"
    - git submodule sync
    - git submodule update --depth 1 --init --recursive --checkout third_party/bsg_micro_designs
    - echo "##/ Start bsg diff test \##"
    - export PATH="$PWD/out/bin:$PATH"
    - python3 ./tests/bsg_micro_designs/generate_bsg_tests.py
    - cat tests/bsg_micro_designs/build/bsg_micro_designs_summary.md
  artifacts:
    when: always
    paths:
      - tests/bsg_micro_designs/build/
